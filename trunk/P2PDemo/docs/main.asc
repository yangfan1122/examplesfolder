/**
 * trace里不能有汉字
 *
 */

var nc;
var ns;
var gs
var ng;
//var _sourceStreamName;
var state;
var counter = 0;
var intervalID;
var playAuth;//客户端用于播放的without

application.onAppStart = function()
{
	trace("onAppStart");
	creatConnect();
}

/**
 * 接收发布端的without，当客户端连接时将without返回给客户端
 * @param client, _id
 * 
 */	
application.onConnect = function(client, _id)
{
	trace("application.onConnect");
	this.acceptConnection(client);

	client.setAuth = function(_obj, _publisher)
	{
		if(_publisher == "publisher")
		{
			playAuth = _obj;
		}
		else if(_publisher != "publisher" && playAuth!=null && playAuth!="")
		{
			client.call("serverUpdate", new randHandler(), playAuth); 
		}
		else
		{
			trace("call client failed ,  playAuth="+playAuth);
		}
		
		return "call server success!";
	}

	randHandler = function()
	{ 
		this.onResult = function(res)
		{ 
			trace("onResult: " + res); 
		} 
		this.onStatus = function(info)
		{ 
			trace("onStatus:" + info); 
		} 
	}; 
};


/**
 * 创建连接
 * @param
 *
 */
function creatConnect()
{
	nc = new NetConnection(); 
	nc.onStatus = ncStatus;
	nc.connect("rtmfp://localhost/receiveStreamTest");
}

/**
 * nc状态
 * @param info
 *
 */
function ncStatus(info)
{
	if (info.code == "NetConnection.Connect.Success" && nc.isConnected)
	{ 
		state = info.code;
		creatGroup();
    }
	else if(info.code == "NetConnection.Connect.AppShutdown")
	{
		//The application has been shut down (for example, if the application is out of memory resources and must shut down to prevent the server from crashing) or the server has shut down.
		state = info.code;
		destroyHandler();
	}
	else if(info.code == "NetConnection.Connect.Closed")
	{
		state = info.code;
		destroyHandler();
	}
	else
	{
		trace("nc - "+info.code);
	}
}

/**
 * 创建组
 * @param
 *
 */
function creatGroup()
{
	gs = new GroupSpecifier("p2p_test");
	gs.multicastEnabled = true; 
	gs.postingEnabled = true; 
	gs.serverChannelEnabled = true;	
	
	gs.makeUnique();
	gs.setPublishPassword("netease@163", Math.floor(Math.random()*10000).toString());
	
	playAuth = gs.groupspecWithoutAuthorizations();
	
	//trace("gs.groupspecWithAuthorizations() = "+gs.groupspecWithAuthorizations());
	trace("gs.groupspecWithoutAuthorizations() = "+gs.groupspecWithoutAuthorizations());
	
	ng = new NetGroup(nc, gs.groupspecWithAuthorizations());
	ng.onStatus = ngStatus;
}

/**
 * ng状态
 * @param info
 *
 */
function ngStatus(info)
{
	if (info.code == "NetGroup.Connect.Success") 
	{
		ns = new NetStream(nc, gs.groupspecWithAuthorizations());
		ns.onStatus = nsStatus;
	}
	else if(info.code == "NetGroup.Connect.Rejected")
	{
		destroyHandler();
	}
	else if(info.code == "NetGroup.MulticastStream.UnpublishNotify")
	{
		destroyHandler();
	}
	else
	{
		trace("ng - "+info.code);
	}
}



/**
 * ns状态
 * @param info
 *
 */
function nsStatus(info)
{
	if(info.code == "NetStream.Connect.Success")
	{
		state = "NetStream.Connect.Success";
		trace("all is ready");
		
		//intervalID = setInterval(imhere, 5000);
	}
	else if(info.code == "NetStream.Publish.Start")
	{
		state = info.code;
	}
	else if(info.code == "NetStream.Unpublish.Success")
	{
		state = info.code;
		
		if (!ng)
        {
            destroyHandler();
        }
	}
	else
	{
		trace("ns - "+info.code);
	}
}

/**
 * 各种删除
 * @param 
 *
 */
function destroyHandler()
{
	switch(state)
	{
		case "NetStream.Publish.Start":
			ns.attach(false);
			ns.publish(false);
			break;
		case "NetStream.Unpublish.Success":
			if (ns) 
			{
				ns.attach(false);
			}
			streamContext.netConnection.close();
			break;
		default:
			break;
	}
	clearInterval(intervalID);
	trace("destroyHandler - state="+state);
}

/**
 * fmle发布时触发
 * @param client, stream
 *
 */
application.onPublish = function(client, stream) 
{
	//_sourceStreamName = stream.name;
	//creatConnect();
	trace("application.onPublish - frome fmle");
	if(state == "NetStream.Connect.Success")
	{
		ns.attach(Stream.get(stream.name));
		intervalID = setInterval(imhere, 10000);
		ns.publish("abcd", "live");
	}
	else
	{
		trace("server-side republish");
		creatConnect();
	}
}

application.onUnpublish = function(client, stream) 
{
    trace("application.onUnpublish - client: "+client+" //// stream.name: " + stream.name);

    if (ns) 
    {
        ns.attach(false);
    }
    nc.close();
}

/**
 * i'm in the group
 * @param 
 *
 */
function imhere()
{
	counter++;
	ns.send("serverMessage", "jiangyou message");
	trace("counter = "+counter);
}



////////////////////////////////////////////////////////////////////////////////
//
// Client callback functions
//
////////////////////////////////////////////////////////////////////////////////

/**
 * A no-op. Answers the RPC in the fashion expected by encoders, but the real 
 * work happens in application.onPublish.
 *
 * @param streamName - The name of the stream being published.
 */
Client.prototype.FCPublish = function(streamName) 
{
    this.call("onFCPublish", null, {code:"NetStream.Publish.Start", description:streamName});
}


/**
 * A no-op. Answers the RPC in the fashion expected by encoders, but the real 
 * work happens in application.onUnpublish.
 *
 * @param streamName - The name of the stream being unpublished.
 */
Client.prototype.FCUnpublish = function(streamName) 
{
    this.call("onFCUnpublish", null, {code:"NetStream.Unpublish.Success", description:streamName});
}


/**
 * If the client invoker's ip matches what was captured for a currently publishing 
 * stream, assume it's the same client and reset the stream. Otherwise, ignore.
 *
 * @param streamName - The name of the stream being released.
 */
Client.prototype.releaseStream = function(streamName) 
{
}








